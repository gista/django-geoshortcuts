#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Sun Jul 10 14:27:07 2011 by generateDS.py version 2.5a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf_8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
STRING_CLEANUP_PAT = re_.compile(r"[\n\r\s]+")

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    # First try with no namespace.
    value = attrs.get(attr_name)
    if value is None:
        # Now try the other possible namespaces.
        namespaces = node.nsmap.itervalues()
        for namespace in namespaces:
            value = attrs.get('{%s}%s' % (namespace, attr_name, ))
            if value is not None:
                break
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class gpxType(GeneratedsSuper):
    """GPX documents contain a metadata header, followed by waypoints,
    routes, and tracks. You can add your own elements to the
    extensions section of the GPX document. You must include the
    version number in your GPX document. You must include the name
    or URL of the software that created your GPX document. This
    allows others to inform the creator of a GPX instance document
    that fails to validate."""
    subclass = None
    superclass = None
    def __init__(self, version=None, creator=None, metadata=None, wpt=None, rte=None, trk=None, extensions=None):
        self.version = _cast(None, version)
        self.creator = _cast(None, creator)
        self.metadata = metadata
        if wpt is None:
            self.wpt = []
        else:
            self.wpt = wpt
        if rte is None:
            self.rte = []
        else:
            self.rte = rte
        if trk is None:
            self.trk = []
        else:
            self.trk = trk
        self.extensions = extensions
    def factory(*args_, **kwargs_):
        if gpxType.subclass:
            return gpxType.subclass(*args_, **kwargs_)
        else:
            return gpxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_metadata(self): return self.metadata
    def set_metadata(self, metadata): self.metadata = metadata
    def get_wpt(self): return self.wpt
    def set_wpt(self, wpt): self.wpt = wpt
    def add_wpt(self, value): self.wpt.append(value)
    def insert_wpt(self, index, value): self.wpt[index] = value
    def get_rte(self): return self.rte
    def set_rte(self, rte): self.rte = rte
    def add_rte(self, value): self.rte.append(value)
    def insert_rte(self, index, value): self.rte[index] = value
    def get_trk(self): return self.trk
    def set_trk(self, trk): self.trk = trk
    def add_trk(self, value): self.trk.append(value)
    def insert_trk(self, index, value): self.trk[index] = value
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_creator(self): return self.creator
    def set_creator(self, creator): self.creator = creator
    def export(self, outfile, level, namespace_='', name_='gpxType', namespacedef_='xmlns="http://www.topografix.com/GPX/1/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.topografix.com/GPX/1/1"'):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='gpxType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='gpxType'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.creator is not None and 'creator' not in already_processed:
            already_processed.append('creator')
            outfile.write(' creator=%s' % (self.gds_format_string(quote_attrib(self.creator).encode(ExternalEncoding), input_name='creator'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='gpxType', fromsubclass_=False):
        if self.metadata:
            self.metadata.export(outfile, level, namespace_, name_='metadata')
        for wpt_ in self.wpt:
            wpt_.export(outfile, level, namespace_, name_='wpt')
        for rte_ in self.rte:
            rte_.export(outfile, level, namespace_, name_='rte')
        for trk_ in self.trk:
            trk_.export(outfile, level, namespace_, name_='trk')
        if self.extensions:
            self.extensions.export(outfile, level, namespace_, name_='extensions')
    def hasContent_(self):
        if (
            self.metadata is not None or
            self.wpt or
            self.rte or
            self.trk or
            self.extensions is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='gpxType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            showIndent(outfile, level)
            outfile.write('version = "%s",\n' % (self.version,))
        if self.creator is not None and 'creator' not in already_processed:
            already_processed.append('creator')
            showIndent(outfile, level)
            outfile.write('creator = "%s",\n' % (self.creator,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.metadata is not None:
            showIndent(outfile, level)
            outfile.write('metadata=model_.metadataType(\n')
            self.metadata.exportLiteral(outfile, level, name_='metadata')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('wpt=[\n')
        level += 1
        for wpt_ in self.wpt:
            showIndent(outfile, level)
            outfile.write('model_.wptType(\n')
            wpt_.exportLiteral(outfile, level, name_='wptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('rte=[\n')
        level += 1
        for rte_ in self.rte:
            showIndent(outfile, level)
            outfile.write('model_.rteType(\n')
            rte_.exportLiteral(outfile, level, name_='rteType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('trk=[\n')
        level += 1
        for trk_ in self.trk:
            showIndent(outfile, level)
            outfile.write('model_.trkType(\n')
            trk_.exportLiteral(outfile, level, name_='trkType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.extensions is not None:
            showIndent(outfile, level)
            outfile.write('extensions=model_.extensionsType(\n')
            self.extensions.exportLiteral(outfile, level, name_='extensions')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.append('version')
            self.version = value
        value = find_attr_value_('creator', node)
        if value is not None and 'creator' not in already_processed:
            already_processed.append('creator')
            self.creator = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'metadata':
            obj_ = metadataType.factory()
            obj_.build(child_)
            self.set_metadata(obj_)
        elif nodeName_ == 'wpt':
            obj_ = wptType.factory()
            obj_.build(child_)
            self.wpt.append(obj_)
        elif nodeName_ == 'rte':
            obj_ = rteType.factory()
            obj_.build(child_)
            self.rte.append(obj_)
        elif nodeName_ == 'trk':
            obj_ = trkType.factory()
            obj_.build(child_)
            self.trk.append(obj_)
        elif nodeName_ == 'extensions':
            obj_ = extensionsType.factory()
            obj_.build(child_)
            self.set_extensions(obj_)
# end class gpxType


class metadataType(GeneratedsSuper):
    """Information about the GPX file, author, and copyright restrictions
    goes in the metadata section. Providing rich, meaningful
    information about your GPX files allows others to search for and
    use your GPS data."""
    subclass = None
    superclass = None
    def __init__(self, name=None, desc=None, author=None, copyright=None, link=None, time=None, keywords=None, bounds=None, extensions=None):
        self.name = name
        self.desc = desc
        self.author = author
        self.copyright = copyright
        if link is None:
            self.link = []
        else:
            self.link = link
        self.time = time
        self.keywords = keywords
        self.bounds = bounds
        self.extensions = extensions
    def factory(*args_, **kwargs_):
        if metadataType.subclass:
            return metadataType.subclass(*args_, **kwargs_)
        else:
            return metadataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_author(self): return self.author
    def set_author(self, author): self.author = author
    def get_copyright(self): return self.copyright
    def set_copyright(self, copyright): self.copyright = copyright
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link(self, index, value): self.link[index] = value
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_keywords(self): return self.keywords
    def set_keywords(self, keywords): self.keywords = keywords
    def get_bounds(self): return self.bounds
    def set_bounds(self, bounds): self.bounds = bounds
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def export(self, outfile, level, namespace_='', name_='metadataType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='metadataType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='metadataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='metadataType', fromsubclass_=False):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('<%sdesc>%s</%sdesc>\n' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_))
        if self.author:
            self.author.export(outfile, level, namespace_, name_='author')
        if self.copyright:
            self.copyright.export(outfile, level, namespace_, name_='copyright')
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link')
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('<%stime>%s</%stime>\n' % (namespace_, self.gds_format_string(quote_xml(self.time).encode(ExternalEncoding), input_name='time'), namespace_))
        if self.keywords is not None:
            showIndent(outfile, level)
            outfile.write('<%skeywords>%s</%skeywords>\n' % (namespace_, self.gds_format_string(quote_xml(self.keywords).encode(ExternalEncoding), input_name='keywords'), namespace_))
        if self.bounds:
            self.bounds.export(outfile, level, namespace_, name_='bounds')
        if self.extensions:
            self.extensions.export(outfile, level, namespace_, name_='extensions')
    def hasContent_(self):
        if (
            self.name is not None or
            self.desc is not None or
            self.author is not None or
            self.copyright is not None or
            self.link or
            self.time is not None or
            self.keywords is not None or
            self.bounds is not None or
            self.extensions is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='metadataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.author is not None:
            showIndent(outfile, level)
            outfile.write('author=model_.personType(\n')
            self.author.exportLiteral(outfile, level, name_='author')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.copyright is not None:
            showIndent(outfile, level)
            outfile.write('copyright=model_.copyrightType(\n')
            self.copyright.exportLiteral(outfile, level, name_='copyright')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('link=[\n')
        level += 1
        for link_ in self.link:
            showIndent(outfile, level)
            outfile.write('model_.linkType(\n')
            link_.exportLiteral(outfile, level, name_='linkType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=%s,\n' % quote_python(self.time).encode(ExternalEncoding))
        if self.keywords is not None:
            showIndent(outfile, level)
            outfile.write('keywords=%s,\n' % quote_python(self.keywords).encode(ExternalEncoding))
        if self.bounds is not None:
            showIndent(outfile, level)
            outfile.write('bounds=model_.boundsType(\n')
            self.bounds.exportLiteral(outfile, level, name_='bounds')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.extensions is not None:
            showIndent(outfile, level)
            outfile.write('extensions=model_.extensionsType(\n')
            self.extensions.exportLiteral(outfile, level, name_='extensions')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'author':
            obj_ = personType.factory()
            obj_.build(child_)
            self.set_author(obj_)
        elif nodeName_ == 'copyright':
            obj_ = copyrightType.factory()
            obj_.build(child_)
            self.set_copyright(obj_)
        elif nodeName_ == 'link':
            obj_ = linkType.factory()
            obj_.build(child_)
            self.link.append(obj_)
        elif nodeName_ == 'time':
            time_ = child_.text
            time_ = self.gds_validate_string(time_, node, 'time')
            self.time = time_
        elif nodeName_ == 'keywords':
            keywords_ = child_.text
            keywords_ = self.gds_validate_string(keywords_, node, 'keywords')
            self.keywords = keywords_
        elif nodeName_ == 'bounds':
            obj_ = boundsType.factory()
            obj_.build(child_)
            self.set_bounds(obj_)
        elif nodeName_ == 'extensions':
            obj_ = extensionsType.factory()
            obj_.build(child_)
            self.set_extensions(obj_)
# end class metadataType


class wptType(GeneratedsSuper):
    """wpt represents a waypoint, point of interest, or named feature on a
    map. The latitude of the point. Decimal degrees, WGS84 datum.
    The latitude of the point. Decimal degrees, WGS84 datum."""
    subclass = None
    superclass = None
    def __init__(self, lat=None, lon=None, ele=None, time=None, magvar=None, geoidheight=None, name=None, cmt=None, desc=None, src=None, link=None, sym=None, type_=None, fix=None, sat=None, hdop=None, vdop=None, pdop=None, ageofdgpsdata=None, dgpsid=None, extensions=None):
        self.lat = _cast(None, lat)
        self.lon = _cast(None, lon)
        self.ele = ele
        self.time = time
        self.magvar = magvar
        self.geoidheight = geoidheight
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        if link is None:
            self.link = []
        else:
            self.link = link
        self.sym = sym
        self.type_ = type_
        self.fix = fix
        self.sat = sat
        self.hdop = hdop
        self.vdop = vdop
        self.pdop = pdop
        self.ageofdgpsdata = ageofdgpsdata
        self.dgpsid = dgpsid
        self.extensions = extensions
    def factory(*args_, **kwargs_):
        if wptType.subclass:
            return wptType.subclass(*args_, **kwargs_)
        else:
            return wptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ele(self): return self.ele
    def set_ele(self, ele): self.ele = ele
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_magvar(self): return self.magvar
    def set_magvar(self, magvar): self.magvar = magvar
    def validate_degreesType(self, value):
        # Validate type degreesType, a restriction on xsd:decimal.
        pass
    def get_geoidheight(self): return self.geoidheight
    def set_geoidheight(self, geoidheight): self.geoidheight = geoidheight
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link(self, index, value): self.link[index] = value
    def get_sym(self): return self.sym
    def set_sym(self, sym): self.sym = sym
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_fix(self): return self.fix
    def set_fix(self, fix): self.fix = fix
    def validate_fixType(self, value):
        # Validate type fixType, a restriction on xsd:string.
        pass
    def get_sat(self): return self.sat
    def set_sat(self, sat): self.sat = sat
    def get_hdop(self): return self.hdop
    def set_hdop(self, hdop): self.hdop = hdop
    def get_vdop(self): return self.vdop
    def set_vdop(self, vdop): self.vdop = vdop
    def get_pdop(self): return self.pdop
    def set_pdop(self, pdop): self.pdop = pdop
    def get_ageofdgpsdata(self): return self.ageofdgpsdata
    def set_ageofdgpsdata(self, ageofdgpsdata): self.ageofdgpsdata = ageofdgpsdata
    def get_dgpsid(self): return self.dgpsid
    def set_dgpsid(self, dgpsid): self.dgpsid = dgpsid
    def validate_dgpsStationType(self, value):
        # Validate type dgpsStationType, a restriction on xsd:integer.
        pass
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def get_lat(self): return self.lat
    def set_lat(self, lat): self.lat = lat
    def validate_latitudeType(self, value):
        # Validate type latitudeType, a restriction on xsd:decimal.
        pass
    def get_lon(self): return self.lon
    def set_lon(self, lon): self.lon = lon
    def validate_longitudeType(self, value):
        # Validate type longitudeType, a restriction on xsd:decimal.
        pass
    def export(self, outfile, level, namespace_='', name_='wptType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='wptType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='wptType'):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.append('lat')
            outfile.write(' lat=%s' % (quote_attrib(self.lat), ))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.append('lon')
            outfile.write(' lon=%s' % (quote_attrib(self.lon), ))
    def exportChildren(self, outfile, level, namespace_='', name_='wptType', fromsubclass_=False):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('<%sele>%s</%sele>\n' % (namespace_, self.gds_format_string(quote_xml(self.ele).encode(ExternalEncoding), input_name='ele'), namespace_))
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('<%stime>%s</%stime>\n' % (namespace_, self.gds_format_string(quote_xml(self.time).encode(ExternalEncoding), input_name='time'), namespace_))
        if self.magvar is not None:
            showIndent(outfile, level)
            outfile.write('<%smagvar>%s</%smagvar>\n' % (namespace_, self.gds_format_float(self.magvar, input_name='magvar'), namespace_))
        if self.geoidheight is not None:
            showIndent(outfile, level)
            outfile.write('<%sgeoidheight>%s</%sgeoidheight>\n' % (namespace_, self.gds_format_string(quote_xml(self.geoidheight).encode(ExternalEncoding), input_name='geoidheight'), namespace_))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('<%scmt>%s</%scmt>\n' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('<%sdesc>%s</%sdesc>\n' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('<%ssrc>%s</%ssrc>\n' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_))
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link')
        if self.sym is not None:
            showIndent(outfile, level)
            outfile.write('<%ssym>%s</%ssym>\n' % (namespace_, self.gds_format_string(quote_xml(self.sym).encode(ExternalEncoding), input_name='sym'), namespace_))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('<%stype>%s</%stype>\n' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_))
        if self.fix is not None:
            showIndent(outfile, level)
            outfile.write('<%sfix>%s</%sfix>\n' % (namespace_, self.gds_format_string(quote_xml(self.fix).encode(ExternalEncoding), input_name='fix'), namespace_))
        if self.sat is not None:
            showIndent(outfile, level)
            outfile.write('<%ssat>%s</%ssat>\n' % (namespace_, self.gds_format_string(quote_xml(self.sat).encode(ExternalEncoding), input_name='sat'), namespace_))
        if self.hdop is not None:
            showIndent(outfile, level)
            outfile.write('<%shdop>%s</%shdop>\n' % (namespace_, self.gds_format_string(quote_xml(self.hdop).encode(ExternalEncoding), input_name='hdop'), namespace_))
        if self.vdop is not None:
            showIndent(outfile, level)
            outfile.write('<%svdop>%s</%svdop>\n' % (namespace_, self.gds_format_string(quote_xml(self.vdop).encode(ExternalEncoding), input_name='vdop'), namespace_))
        if self.pdop is not None:
            showIndent(outfile, level)
            outfile.write('<%spdop>%s</%spdop>\n' % (namespace_, self.gds_format_string(quote_xml(self.pdop).encode(ExternalEncoding), input_name='pdop'), namespace_))
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level)
            outfile.write('<%sageofdgpsdata>%s</%sageofdgpsdata>\n' % (namespace_, self.gds_format_string(quote_xml(self.ageofdgpsdata).encode(ExternalEncoding), input_name='ageofdgpsdata'), namespace_))
        if self.dgpsid is not None:
            showIndent(outfile, level)
            outfile.write('<%sdgpsid>%s</%sdgpsid>\n' % (namespace_, self.gds_format_integer(self.dgpsid, input_name='dgpsid'), namespace_))
        if self.extensions:
            self.extensions.export(outfile, level, namespace_, name_='extensions')
    def hasContent_(self):
        if (
            self.ele is not None or
            self.time is not None or
            self.magvar is not None or
            self.geoidheight is not None or
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.link or
            self.sym is not None or
            self.type_ is not None or
            self.fix is not None or
            self.sat is not None or
            self.hdop is not None or
            self.vdop is not None or
            self.pdop is not None or
            self.ageofdgpsdata is not None or
            self.dgpsid is not None or
            self.extensions is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='wptType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.append('lat')
            showIndent(outfile, level)
            outfile.write('lat = %f,\n' % (self.lat,))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.append('lon')
            showIndent(outfile, level)
            outfile.write('lon = %f,\n' % (self.lon,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('ele=%s,\n' % quote_python(self.ele).encode(ExternalEncoding))
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=%s,\n' % quote_python(self.time).encode(ExternalEncoding))
        if self.magvar is not None:
            showIndent(outfile, level)
            outfile.write('magvar=%f,\n' % self.magvar)
        if self.geoidheight is not None:
            showIndent(outfile, level)
            outfile.write('geoidheight=%s,\n' % quote_python(self.geoidheight).encode(ExternalEncoding))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('link=[\n')
        level += 1
        for link_ in self.link:
            showIndent(outfile, level)
            outfile.write('model_.linkType(\n')
            link_.exportLiteral(outfile, level, name_='linkType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.sym is not None:
            showIndent(outfile, level)
            outfile.write('sym=%s,\n' % quote_python(self.sym).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.fix is not None:
            showIndent(outfile, level)
            outfile.write('fix=%s,\n' % quote_python(self.fix).encode(ExternalEncoding))
        if self.sat is not None:
            showIndent(outfile, level)
            outfile.write('sat=%s,\n' % quote_python(self.sat).encode(ExternalEncoding))
        if self.hdop is not None:
            showIndent(outfile, level)
            outfile.write('hdop=%s,\n' % quote_python(self.hdop).encode(ExternalEncoding))
        if self.vdop is not None:
            showIndent(outfile, level)
            outfile.write('vdop=%s,\n' % quote_python(self.vdop).encode(ExternalEncoding))
        if self.pdop is not None:
            showIndent(outfile, level)
            outfile.write('pdop=%s,\n' % quote_python(self.pdop).encode(ExternalEncoding))
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level)
            outfile.write('ageofdgpsdata=%s,\n' % quote_python(self.ageofdgpsdata).encode(ExternalEncoding))
        if self.dgpsid is not None:
            showIndent(outfile, level)
            outfile.write('dgpsid=%d,\n' % self.dgpsid)
        if self.extensions is not None:
            showIndent(outfile, level)
            outfile.write('extensions=model_.extensionsType(\n')
            self.extensions.exportLiteral(outfile, level, name_='extensions')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lat', node)
        if value is not None and 'lat' not in already_processed:
            already_processed.append('lat')
            try:
                self.lat = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (lat): %s' % exp)
            self.validate_latitudeType(self.lat)    # validate type latitudeType
        value = find_attr_value_('lon', node)
        if value is not None and 'lon' not in already_processed:
            already_processed.append('lon')
            try:
                self.lon = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (lon): %s' % exp)
            self.validate_longitudeType(self.lon)    # validate type longitudeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ele':
            ele_ = child_.text
            ele_ = self.gds_validate_string(ele_, node, 'ele')
            self.ele = ele_
        elif nodeName_ == 'time':
            time_ = child_.text
            time_ = self.gds_validate_string(time_, node, 'time')
            self.time = time_
        elif nodeName_ == 'magvar':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'magvar')
            self.magvar = fval_
            self.validate_degreesType(self.magvar)    # validate type degreesType
        elif nodeName_ == 'geoidheight':
            geoidheight_ = child_.text
            geoidheight_ = self.gds_validate_string(geoidheight_, node, 'geoidheight')
            self.geoidheight = geoidheight_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'link':
            obj_ = linkType.factory()
            obj_.build(child_)
            self.link.append(obj_)
        elif nodeName_ == 'sym':
            sym_ = child_.text
            sym_ = self.gds_validate_string(sym_, node, 'sym')
            self.sym = sym_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'fix':
            fix_ = child_.text
            fix_ = self.gds_validate_string(fix_, node, 'fix')
            self.fix = fix_
            self.validate_fixType(self.fix)    # validate type fixType
        elif nodeName_ == 'sat':
            sat_ = child_.text
            sat_ = self.gds_validate_string(sat_, node, 'sat')
            self.sat = sat_
        elif nodeName_ == 'hdop':
            hdop_ = child_.text
            hdop_ = self.gds_validate_string(hdop_, node, 'hdop')
            self.hdop = hdop_
        elif nodeName_ == 'vdop':
            vdop_ = child_.text
            vdop_ = self.gds_validate_string(vdop_, node, 'vdop')
            self.vdop = vdop_
        elif nodeName_ == 'pdop':
            pdop_ = child_.text
            pdop_ = self.gds_validate_string(pdop_, node, 'pdop')
            self.pdop = pdop_
        elif nodeName_ == 'ageofdgpsdata':
            ageofdgpsdata_ = child_.text
            ageofdgpsdata_ = self.gds_validate_string(ageofdgpsdata_, node, 'ageofdgpsdata')
            self.ageofdgpsdata = ageofdgpsdata_
        elif nodeName_ == 'dgpsid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'dgpsid')
            self.dgpsid = ival_
            self.validate_dgpsStationType(self.dgpsid)    # validate type dgpsStationType
        elif nodeName_ == 'extensions':
            obj_ = extensionsType.factory()
            obj_.build(child_)
            self.set_extensions(obj_)
# end class wptType


class rteType(GeneratedsSuper):
    """rte represents route - an ordered list of waypoints representing a
    series of turn points leading to a destination."""
    subclass = None
    superclass = None
    def __init__(self, name=None, cmt=None, desc=None, src=None, link=None, number=None, type_=None, extensions=None, rtept=None):
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        if link is None:
            self.link = []
        else:
            self.link = link
        self.number = number
        self.type_ = type_
        self.extensions = extensions
        if rtept is None:
            self.rtept = []
        else:
            self.rtept = rtept
    def factory(*args_, **kwargs_):
        if rteType.subclass:
            return rteType.subclass(*args_, **kwargs_)
        else:
            return rteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link(self, index, value): self.link[index] = value
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def get_rtept(self): return self.rtept
    def set_rtept(self, rtept): self.rtept = rtept
    def add_rtept(self, value): self.rtept.append(value)
    def insert_rtept(self, index, value): self.rtept[index] = value
    def export(self, outfile, level, namespace_='', name_='rteType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='rteType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='rteType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='rteType', fromsubclass_=False):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('<%scmt>%s</%scmt>\n' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('<%sdesc>%s</%sdesc>\n' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('<%ssrc>%s</%ssrc>\n' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_))
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link')
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('<%snumber>%s</%snumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.number).encode(ExternalEncoding), input_name='number'), namespace_))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('<%stype>%s</%stype>\n' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_))
        if self.extensions:
            self.extensions.export(outfile, level, namespace_, name_='extensions')
        for rtept_ in self.rtept:
            rtept_.export(outfile, level, namespace_, name_='rtept')
    def hasContent_(self):
        if (
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.link or
            self.number is not None or
            self.type_ is not None or
            self.extensions is not None or
            self.rtept
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='rteType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('link=[\n')
        level += 1
        for link_ in self.link:
            showIndent(outfile, level)
            outfile.write('model_.linkType(\n')
            link_.exportLiteral(outfile, level, name_='linkType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('number=%s,\n' % quote_python(self.number).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.extensions is not None:
            showIndent(outfile, level)
            outfile.write('extensions=model_.extensionsType(\n')
            self.extensions.exportLiteral(outfile, level, name_='extensions')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('rtept=[\n')
        level += 1
        for rtept_ in self.rtept:
            showIndent(outfile, level)
            outfile.write('model_.wptType(\n')
            rtept_.exportLiteral(outfile, level, name_='wptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'link':
            obj_ = linkType.factory()
            obj_.build(child_)
            self.link.append(obj_)
        elif nodeName_ == 'number':
            number_ = child_.text
            number_ = self.gds_validate_string(number_, node, 'number')
            self.number = number_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'extensions':
            obj_ = extensionsType.factory()
            obj_.build(child_)
            self.set_extensions(obj_)
        elif nodeName_ == 'rtept':
            obj_ = wptType.factory()
            obj_.build(child_)
            self.rtept.append(obj_)
# end class rteType


class trkType(GeneratedsSuper):
    """trk represents a track - an ordered list of points describing a
    path."""
    subclass = None
    superclass = None
    def __init__(self, name=None, cmt=None, desc=None, src=None, link=None, number=None, type_=None, extensions=None, trkseg=None):
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        if link is None:
            self.link = []
        else:
            self.link = link
        self.number = number
        self.type_ = type_
        self.extensions = extensions
        if trkseg is None:
            self.trkseg = []
        else:
            self.trkseg = trkseg
    def factory(*args_, **kwargs_):
        if trkType.subclass:
            return trkType.subclass(*args_, **kwargs_)
        else:
            return trkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link(self, index, value): self.link[index] = value
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def get_trkseg(self): return self.trkseg
    def set_trkseg(self, trkseg): self.trkseg = trkseg
    def add_trkseg(self, value): self.trkseg.append(value)
    def insert_trkseg(self, index, value): self.trkseg[index] = value
    def export(self, outfile, level, namespace_='', name_='trkType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='trkType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='trkType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='trkType', fromsubclass_=False):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('<%scmt>%s</%scmt>\n' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('<%sdesc>%s</%sdesc>\n' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('<%ssrc>%s</%ssrc>\n' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_))
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link')
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('<%snumber>%s</%snumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.number).encode(ExternalEncoding), input_name='number'), namespace_))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('<%stype>%s</%stype>\n' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_))
        if self.extensions:
            self.extensions.export(outfile, level, namespace_, name_='extensions')
        for trkseg_ in self.trkseg:
            trkseg_.export(outfile, level, namespace_, name_='trkseg')
    def hasContent_(self):
        if (
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.link or
            self.number is not None or
            self.type_ is not None or
            self.extensions is not None or
            self.trkseg
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='trkType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('link=[\n')
        level += 1
        for link_ in self.link:
            showIndent(outfile, level)
            outfile.write('model_.linkType(\n')
            link_.exportLiteral(outfile, level, name_='linkType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('number=%s,\n' % quote_python(self.number).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.extensions is not None:
            showIndent(outfile, level)
            outfile.write('extensions=model_.extensionsType(\n')
            self.extensions.exportLiteral(outfile, level, name_='extensions')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('trkseg=[\n')
        level += 1
        for trkseg_ in self.trkseg:
            showIndent(outfile, level)
            outfile.write('model_.trksegType(\n')
            trkseg_.exportLiteral(outfile, level, name_='trksegType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'link':
            obj_ = linkType.factory()
            obj_.build(child_)
            self.link.append(obj_)
        elif nodeName_ == 'number':
            number_ = child_.text
            number_ = self.gds_validate_string(number_, node, 'number')
            self.number = number_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'extensions':
            obj_ = extensionsType.factory()
            obj_.build(child_)
            self.set_extensions(obj_)
        elif nodeName_ == 'trkseg':
            obj_ = trksegType.factory()
            obj_.build(child_)
            self.trkseg.append(obj_)
# end class trkType


class extensionsType(GeneratedsSuper):
    """You can add extend GPX by adding your own elements from another
    schema here. You can add extend GPX by adding your own elements
    from another schema here."""
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if extensionsType.subclass:
            return extensionsType.subclass(*args_, **kwargs_)
        else:
            return extensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='extensionsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='extensionsType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_.encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='extensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='extensionsType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='extensionsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class extensionsType


class trksegType(GeneratedsSuper):
    """A Track Segment holds a list of Track Points which are logically
    connected in order. To represent a single GPS track where GPS
    reception was lost, or the GPS receiver was turned off, start a
    new Track Segment for each continuous span of track data."""
    subclass = None
    superclass = None
    def __init__(self, trkpt=None, extensions=None):
        if trkpt is None:
            self.trkpt = []
        else:
            self.trkpt = trkpt
        self.extensions = extensions
    def factory(*args_, **kwargs_):
        if trksegType.subclass:
            return trksegType.subclass(*args_, **kwargs_)
        else:
            return trksegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_trkpt(self): return self.trkpt
    def set_trkpt(self, trkpt): self.trkpt = trkpt
    def add_trkpt(self, value): self.trkpt.append(value)
    def insert_trkpt(self, index, value): self.trkpt[index] = value
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def export(self, outfile, level, namespace_='', name_='trksegType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='trksegType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='trksegType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='trksegType', fromsubclass_=False):
        for trkpt_ in self.trkpt:
            trkpt_.export(outfile, level, namespace_, name_='trkpt')
        if self.extensions:
            self.extensions.export(outfile, level, namespace_, name_='extensions')
    def hasContent_(self):
        if (
            self.trkpt or
            self.extensions is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='trksegType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('trkpt=[\n')
        level += 1
        for trkpt_ in self.trkpt:
            showIndent(outfile, level)
            outfile.write('model_.wptType(\n')
            trkpt_.exportLiteral(outfile, level, name_='wptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.extensions is not None:
            showIndent(outfile, level)
            outfile.write('extensions=model_.extensionsType(\n')
            self.extensions.exportLiteral(outfile, level, name_='extensions')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'trkpt':
            obj_ = wptType.factory()
            obj_.build(child_)
            self.trkpt.append(obj_)
        elif nodeName_ == 'extensions':
            obj_ = extensionsType.factory()
            obj_.build(child_)
            self.set_extensions(obj_)
# end class trksegType


class copyrightType(GeneratedsSuper):
    """Information about the copyright holder and any license governing use
    of this file. By linking to an appropriate license, you may
    place your data into the public domain or grant additional usage
    rights. Copyright holder (TopoSoft, Inc.)"""
    subclass = None
    superclass = None
    def __init__(self, author=None, year=None, license=None):
        self.author = _cast(None, author)
        self.year = year
        self.license = license
    def factory(*args_, **kwargs_):
        if copyrightType.subclass:
            return copyrightType.subclass(*args_, **kwargs_)
        else:
            return copyrightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_year(self): return self.year
    def set_year(self, year): self.year = year
    def get_license(self): return self.license
    def set_license(self, license): self.license = license
    def get_author(self): return self.author
    def set_author(self, author): self.author = author
    def export(self, outfile, level, namespace_='', name_='copyrightType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='copyrightType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='copyrightType'):
        if self.author is not None and 'author' not in already_processed:
            already_processed.append('author')
            outfile.write(' author=%s' % (self.gds_format_string(quote_attrib(self.author).encode(ExternalEncoding), input_name='author'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='copyrightType', fromsubclass_=False):
        if self.year is not None:
            showIndent(outfile, level)
            outfile.write('<%syear>%s</%syear>\n' % (namespace_, self.gds_format_string(quote_xml(self.year).encode(ExternalEncoding), input_name='year'), namespace_))
        if self.license is not None:
            showIndent(outfile, level)
            outfile.write('<%slicense>%s</%slicense>\n' % (namespace_, self.gds_format_string(quote_xml(self.license).encode(ExternalEncoding), input_name='license'), namespace_))
    def hasContent_(self):
        if (
            self.year is not None or
            self.license is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='copyrightType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.author is not None and 'author' not in already_processed:
            already_processed.append('author')
            showIndent(outfile, level)
            outfile.write('author = "%s",\n' % (self.author,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.year is not None:
            showIndent(outfile, level)
            outfile.write('year=%s,\n' % quote_python(self.year).encode(ExternalEncoding))
        if self.license is not None:
            showIndent(outfile, level)
            outfile.write('license=%s,\n' % quote_python(self.license).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('author', node)
        if value is not None and 'author' not in already_processed:
            already_processed.append('author')
            self.author = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'year':
            year_ = child_.text
            year_ = self.gds_validate_string(year_, node, 'year')
            self.year = year_
        elif nodeName_ == 'license':
            license_ = child_.text
            license_ = self.gds_validate_string(license_, node, 'license')
            self.license = license_
# end class copyrightType


class linkType(GeneratedsSuper):
    """A link to an external resource (Web page, digital photo, video clip,
    etc) with additional information. URL of hyperlink."""
    subclass = None
    superclass = None
    def __init__(self, href=None, text=None, type_=None):
        self.href = _cast(None, href)
        self.text = text
        self.type_ = type_
    def factory(*args_, **kwargs_):
        if linkType.subclass:
            return linkType.subclass(*args_, **kwargs_)
        else:
            return linkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def export(self, outfile, level, namespace_='', name_='linkType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='linkType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='linkType'):
        if self.href is not None and 'href' not in already_processed:
            already_processed.append('href')
            outfile.write(' href=%s' % (self.gds_format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='linkType', fromsubclass_=False):
        if self.text is not None:
            showIndent(outfile, level)
            outfile.write('<%stext>%s</%stext>\n' % (namespace_, self.gds_format_string(quote_xml(self.text).encode(ExternalEncoding), input_name='text'), namespace_))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('<%stype>%s</%stype>\n' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_))
    def hasContent_(self):
        if (
            self.text is not None or
            self.type_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='linkType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.href is not None and 'href' not in already_processed:
            already_processed.append('href')
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.text is not None:
            showIndent(outfile, level)
            outfile.write('text=%s,\n' % quote_python(self.text).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.append('href')
            self.href = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'text':
            text_ = child_.text
            text_ = self.gds_validate_string(text_, node, 'text')
            self.text = text_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
# end class linkType


class emailType(GeneratedsSuper):
    """An email address. Broken into two parts (id and domain) to help
    prevent email harvesting. id half of email address
    (billgates2004) domain half of email address (hotmail.com)"""
    subclass = None
    superclass = None
    def __init__(self, domain=None, id=None, valueOf_=None):
        self.domain = _cast(None, domain)
        self.id = _cast(None, id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if emailType.subclass:
            return emailType.subclass(*args_, **kwargs_)
        else:
            return emailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_domain(self): return self.domain
    def set_domain(self, domain): self.domain = domain
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='emailType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='emailType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_.encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='emailType'):
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            outfile.write(' domain=%s' % (self.gds_format_string(quote_attrib(self.domain).encode(ExternalEncoding), input_name='domain'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='emailType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='emailType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            showIndent(outfile, level)
            outfile.write('domain = "%s",\n' % (self.domain,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('domain', node)
        if value is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            self.domain = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class emailType


class personType(GeneratedsSuper):
    """A person or organization."""
    subclass = None
    superclass = None
    def __init__(self, name=None, email=None, link=None):
        self.name = name
        self.email = email
        self.link = link
    def factory(*args_, **kwargs_):
        if personType.subclass:
            return personType.subclass(*args_, **kwargs_)
        else:
            return personType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def export(self, outfile, level, namespace_='', name_='personType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='personType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='personType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='personType', fromsubclass_=False):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.email:
            self.email.export(outfile, level, namespace_, name_='email')
        if self.link:
            self.link.export(outfile, level, namespace_, name_='link')
    def hasContent_(self):
        if (
            self.name is not None or
            self.email is not None or
            self.link is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='personType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.email is not None:
            showIndent(outfile, level)
            outfile.write('email=model_.emailType(\n')
            self.email.exportLiteral(outfile, level, name_='email')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.link is not None:
            showIndent(outfile, level)
            outfile.write('link=model_.linkType(\n')
            self.link.exportLiteral(outfile, level, name_='link')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'email':
            obj_ = emailType.factory()
            obj_.build(child_)
            self.set_email(obj_)
        elif nodeName_ == 'link':
            obj_ = linkType.factory()
            obj_.build(child_)
            self.set_link(obj_)
# end class personType


class ptType(GeneratedsSuper):
    """A geographic point with optional elevation and time. Available for
    use by other schemas. The latitude of the point. Decimal
    degrees, WGS84 datum. The latitude of the point. Decimal
    degrees, WGS84 datum."""
    subclass = None
    superclass = None
    def __init__(self, lat=None, lon=None, ele=None, time=None):
        self.lat = _cast(None, lat)
        self.lon = _cast(None, lon)
        self.ele = ele
        self.time = time
    def factory(*args_, **kwargs_):
        if ptType.subclass:
            return ptType.subclass(*args_, **kwargs_)
        else:
            return ptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ele(self): return self.ele
    def set_ele(self, ele): self.ele = ele
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_lat(self): return self.lat
    def set_lat(self, lat): self.lat = lat
    def validate_latitudeType(self, value):
        # Validate type latitudeType, a restriction on xsd:decimal.
        pass
    def get_lon(self): return self.lon
    def set_lon(self, lon): self.lon = lon
    def validate_longitudeType(self, value):
        # Validate type longitudeType, a restriction on xsd:decimal.
        pass
    def export(self, outfile, level, namespace_='', name_='ptType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='ptType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ptType'):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.append('lat')
            outfile.write(' lat=%s' % (quote_attrib(self.lat), ))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.append('lon')
            outfile.write(' lon=%s' % (quote_attrib(self.lon), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ptType', fromsubclass_=False):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('<%sele>%s</%sele>\n' % (namespace_, self.gds_format_string(quote_xml(self.ele).encode(ExternalEncoding), input_name='ele'), namespace_))
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('<%stime>%s</%stime>\n' % (namespace_, self.gds_format_string(quote_xml(self.time).encode(ExternalEncoding), input_name='time'), namespace_))
    def hasContent_(self):
        if (
            self.ele is not None or
            self.time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ptType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.append('lat')
            showIndent(outfile, level)
            outfile.write('lat = %f,\n' % (self.lat,))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.append('lon')
            showIndent(outfile, level)
            outfile.write('lon = %f,\n' % (self.lon,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('ele=%s,\n' % quote_python(self.ele).encode(ExternalEncoding))
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=%s,\n' % quote_python(self.time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lat', node)
        if value is not None and 'lat' not in already_processed:
            already_processed.append('lat')
            try:
                self.lat = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (lat): %s' % exp)
            self.validate_latitudeType(self.lat)    # validate type latitudeType
        value = find_attr_value_('lon', node)
        if value is not None and 'lon' not in already_processed:
            already_processed.append('lon')
            try:
                self.lon = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (lon): %s' % exp)
            self.validate_longitudeType(self.lon)    # validate type longitudeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ele':
            ele_ = child_.text
            ele_ = self.gds_validate_string(ele_, node, 'ele')
            self.ele = ele_
        elif nodeName_ == 'time':
            time_ = child_.text
            time_ = self.gds_validate_string(time_, node, 'time')
            self.time = time_
# end class ptType


class ptsegType(GeneratedsSuper):
    """An ordered sequence of points. (for polygons or polylines, e.g.)"""
    subclass = None
    superclass = None
    def __init__(self, pt=None):
        if pt is None:
            self.pt = []
        else:
            self.pt = pt
    def factory(*args_, **kwargs_):
        if ptsegType.subclass:
            return ptsegType.subclass(*args_, **kwargs_)
        else:
            return ptsegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_pt(self): return self.pt
    def set_pt(self, pt): self.pt = pt
    def add_pt(self, value): self.pt.append(value)
    def insert_pt(self, index, value): self.pt[index] = value
    def export(self, outfile, level, namespace_='', name_='ptsegType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='ptsegType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ptsegType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ptsegType', fromsubclass_=False):
        for pt_ in self.pt:
            pt_.export(outfile, level, namespace_, name_='pt')
    def hasContent_(self):
        if (
            self.pt
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ptsegType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('pt=[\n')
        level += 1
        for pt_ in self.pt:
            showIndent(outfile, level)
            outfile.write('model_.ptType(\n')
            pt_.exportLiteral(outfile, level, name_='ptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'pt':
            obj_ = ptType.factory()
            obj_.build(child_)
            self.pt.append(obj_)
# end class ptsegType


class boundsType(GeneratedsSuper):
    """Two lat/lon pairs defining the extent of an element. The minimum
    latitude. The minimum longitude. The maximum latitude. The
    maximum longitude."""
    subclass = None
    superclass = None
    def __init__(self, minlat=None, maxlon=None, minlon=None, maxlat=None, valueOf_=None):
        self.minlat = _cast(None, minlat)
        self.maxlon = _cast(None, maxlon)
        self.minlon = _cast(None, minlon)
        self.maxlat = _cast(None, maxlat)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if boundsType.subclass:
            return boundsType.subclass(*args_, **kwargs_)
        else:
            return boundsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_minlat(self): return self.minlat
    def set_minlat(self, minlat): self.minlat = minlat
    def validate_latitudeType(self, value):
        # Validate type latitudeType, a restriction on xsd:decimal.
        pass
    def get_maxlon(self): return self.maxlon
    def set_maxlon(self, maxlon): self.maxlon = maxlon
    def validate_longitudeType(self, value):
        # Validate type longitudeType, a restriction on xsd:decimal.
        pass
    def get_minlon(self): return self.minlon
    def set_minlon(self, minlon): self.minlon = minlon
    def get_maxlat(self): return self.maxlat
    def set_maxlat(self, maxlat): self.maxlat = maxlat
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='boundsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='boundsType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_.encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='boundsType'):
        if self.minlat is not None and 'minlat' not in already_processed:
            already_processed.append('minlat')
            outfile.write(' minlat=%s' % (quote_attrib(self.minlat), ))
        if self.maxlon is not None and 'maxlon' not in already_processed:
            already_processed.append('maxlon')
            outfile.write(' maxlon=%s' % (quote_attrib(self.maxlon), ))
        if self.minlon is not None and 'minlon' not in already_processed:
            already_processed.append('minlon')
            outfile.write(' minlon=%s' % (quote_attrib(self.minlon), ))
        if self.maxlat is not None and 'maxlat' not in already_processed:
            already_processed.append('maxlat')
            outfile.write(' maxlat=%s' % (quote_attrib(self.maxlat), ))
    def exportChildren(self, outfile, level, namespace_='', name_='boundsType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='boundsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.minlat is not None and 'minlat' not in already_processed:
            already_processed.append('minlat')
            showIndent(outfile, level)
            outfile.write('minlat = %f,\n' % (self.minlat,))
        if self.maxlon is not None and 'maxlon' not in already_processed:
            already_processed.append('maxlon')
            showIndent(outfile, level)
            outfile.write('maxlon = %f,\n' % (self.maxlon,))
        if self.minlon is not None and 'minlon' not in already_processed:
            already_processed.append('minlon')
            showIndent(outfile, level)
            outfile.write('minlon = %f,\n' % (self.minlon,))
        if self.maxlat is not None and 'maxlat' not in already_processed:
            already_processed.append('maxlat')
            showIndent(outfile, level)
            outfile.write('maxlat = %f,\n' % (self.maxlat,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('minlat', node)
        if value is not None and 'minlat' not in already_processed:
            already_processed.append('minlat')
            try:
                self.minlat = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (minlat): %s' % exp)
            self.validate_latitudeType(self.minlat)    # validate type latitudeType
        value = find_attr_value_('maxlon', node)
        if value is not None and 'maxlon' not in already_processed:
            already_processed.append('maxlon')
            try:
                self.maxlon = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (maxlon): %s' % exp)
            self.validate_longitudeType(self.maxlon)    # validate type longitudeType
        value = find_attr_value_('minlon', node)
        if value is not None and 'minlon' not in already_processed:
            already_processed.append('minlon')
            try:
                self.minlon = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (minlon): %s' % exp)
            self.validate_longitudeType(self.minlon)    # validate type longitudeType
        value = find_attr_value_('maxlat', node)
        if value is not None and 'maxlat' not in already_processed:
            already_processed.append('maxlat')
            try:
                self.maxlat = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (maxlat): %s' % exp)
            self.validate_latitudeType(self.maxlat)    # validate type latitudeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class boundsType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpxType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpxType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="gpx",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpxType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from gpx import *\n\n')
    sys.stdout.write('import gpx as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "boundsType",
    "copyrightType",
    "emailType",
    "extensionsType",
    "gpxType",
    "linkType",
    "metadataType",
    "personType",
    "ptType",
    "ptsegType",
    "rteType",
    "trkType",
    "trksegType",
    "wptType"
    ]
